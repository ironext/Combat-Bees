using System.Runtime.CompilerServices;
using Unity.Entities;
using Unity.Jobs;

[CompilerGenerated]
public class JobEntityCalledWithIndirectionSystem : SystemBase
{
	private EntityQuery __generatedQuery_0;

	private ComponentTypeHandle<Rotation> Rotation_RW_ComponentTypeHandle;

	private ComponentTypeHandle<RotationSpeed_ForEach> RotationSpeed_ForEach_RO_ComponentTypeHandle;

	protected override void OnUpdate()
	{
		Method2();
	}

	private void Method1()
	{
		Method2();
	}

	private void Method2()
	{
		MyJobEntity myJobEntity = default(MyJobEntity);
		myJobEntity.DeltaTime = base.Time.DeltaTime;
		MyJobEntity myJobEntity2 = myJobEntity;
		base.Dependency = myJobEntity2.ScheduleParallel(base.Dependency);
	}

	[DOTSCompilerPatchedMethod("Method2")]
	private void __Method2_72EC3C2E()
	{
		MyJobEntity myJobEntity = default(MyJobEntity);
		myJobEntity.DeltaTime = base.Time.DeltaTime;
		MyJobEntity job = myJobEntity;
		base.Dependency = __ScheduleViaJobEntityBatchExtension_0(job, __generatedQuery_0, base.Dependency);
	}

	protected override void OnCreateForCompiler()
	{
		base.OnCreateForCompiler();
		Rotation_RW_ComponentTypeHandle = GetComponentTypeHandle<Rotation>();
		RotationSpeed_ForEach_RO_ComponentTypeHandle = GetComponentTypeHandle<RotationSpeed_ForEach>(isReadOnly: true);
		__generatedQuery_0 = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[2]
			{
				ComponentType.ReadWrite<Rotation>(),
				ComponentType.ReadOnly<RotationSpeed_ForEach>()
			},
			Any = new ComponentType[0],
			None = new ComponentType[0],
			Options = EntityQueryOptions.IncludeDisabled
		});
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private JobHandle __ScheduleViaJobEntityBatchExtension_0(MyJobEntity job, EntityQuery entityQuery, JobHandle dependency)
	{
		Rotation_RW_ComponentTypeHandle.Update(this);
		RotationSpeed_ForEach_RO_ComponentTypeHandle.Update(this);
		job.__RotationTypeHandle = Rotation_RW_ComponentTypeHandle;
		job.__RotationSpeed_ForEachTypeHandle = RotationSpeed_ForEach_RO_ComponentTypeHandle;
		return JobEntityBatchExtensions.ScheduleParallel(job, entityQuery, dependency);
	}
}
