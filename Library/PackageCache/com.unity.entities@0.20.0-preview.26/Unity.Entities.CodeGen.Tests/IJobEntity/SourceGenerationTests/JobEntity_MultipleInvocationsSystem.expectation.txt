using System.Runtime.CompilerServices;
using Unity.Entities;
using Unity.Jobs;

[CompilerGenerated]
public class JobEntity_MultipleInvocationsSystem : SystemBase
{
	private EntityQuery __generatedQuery_0;

	private EntityQuery __generatedQuery_1;

	private ComponentTypeHandle<Rotation> Rotation_RW_ComponentTypeHandle;

	private ComponentTypeHandle<RotationSpeed_ForEach> RotationSpeed_ForEach_RO_ComponentTypeHandle;

	private ComponentTypeHandle<Translation> Translation_RW_ComponentTypeHandle;

	protected override void OnUpdate()
	{
		MyEntityJob myEntityJob = default(MyEntityJob);
		myEntityJob.MyDeltaTime = base.Time.DeltaTime;
		MyEntityJob myEntityJob2 = myEntityJob;
		base.Dependency = myEntityJob2.ScheduleParallel(base.Dependency);
		EntityQuery entityQuery = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[2]
			{
				typeof(MustHaveComponentData),
				typeof(Translation)
			},
			Options = EntityQueryOptions.IncludeDisabled
		});
		entityQuery.SetChangedVersionFilter(typeof(Translation));
		YourEntityJob yourEntityJob = default(YourEntityJob);
		yourEntityJob.YourMultiplier = 1.2345f;
		YourEntityJob yourEntityJob2 = yourEntityJob;
		base.Dependency = yourEntityJob2.ScheduleParallel(entityQuery, base.Dependency);
	}

	[DOTSCompilerPatchedMethod("OnUpdate")]
	protected void __OnUpdate_28DFD478()
	{
		MyEntityJob myEntityJob = default(MyEntityJob);
		myEntityJob.MyDeltaTime = base.Time.DeltaTime;
		MyEntityJob job = myEntityJob;
		base.Dependency = __ScheduleViaJobEntityBatchExtension_0(job, __generatedQuery_0, base.Dependency);
		EntityQuery entityQuery = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[2]
			{
				typeof(MustHaveComponentData),
				typeof(Translation)
			},
			Options = EntityQueryOptions.IncludeDisabled
		});
		entityQuery.SetChangedVersionFilter(typeof(Translation));
		YourEntityJob yourEntityJob = default(YourEntityJob);
		yourEntityJob.YourMultiplier = 1.2345f;
		YourEntityJob job2 = yourEntityJob;
		base.Dependency = __ScheduleViaJobEntityBatchExtension_1(job2, entityQuery, base.Dependency);
	}

	protected override void OnCreateForCompiler()
	{
		base.OnCreateForCompiler();
		Rotation_RW_ComponentTypeHandle = GetComponentTypeHandle<Rotation>();
		RotationSpeed_ForEach_RO_ComponentTypeHandle = GetComponentTypeHandle<RotationSpeed_ForEach>(isReadOnly: true);
		Translation_RW_ComponentTypeHandle = GetComponentTypeHandle<Translation>();
		__generatedQuery_0 = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[2]
			{
				ComponentType.ReadWrite<Rotation>(),
				ComponentType.ReadOnly<RotationSpeed_ForEach>()
			},
			Any = new ComponentType[0],
			None = new ComponentType[0],
			Options = EntityQueryOptions.IncludeDisabled
		});
		__generatedQuery_1 = GetEntityQuery(new EntityQueryDesc
		{
			All = new ComponentType[1]
			{
				ComponentType.ReadWrite<Translation>()
			},
			Any = new ComponentType[0],
			None = new ComponentType[0],
			Options = EntityQueryOptions.IncludeDisabled
		});
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private JobHandle __ScheduleViaJobEntityBatchExtension_0(MyEntityJob job, EntityQuery entityQuery, JobHandle dependency)
	{
		Rotation_RW_ComponentTypeHandle.Update(this);
		RotationSpeed_ForEach_RO_ComponentTypeHandle.Update(this);
		job.__RotationTypeHandle = Rotation_RW_ComponentTypeHandle;
		job.__RotationSpeed_ForEachTypeHandle = RotationSpeed_ForEach_RO_ComponentTypeHandle;
		return JobEntityBatchExtensions.ScheduleParallel(job, entityQuery, dependency);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private JobHandle __ScheduleViaJobEntityBatchExtension_1(YourEntityJob job, EntityQuery entityQuery, JobHandle dependency)
	{
		Translation_RW_ComponentTypeHandle.Update(this);
		job.__TranslationTypeHandle = Translation_RW_ComponentTypeHandle;
		return JobEntityBatchExtensions.ScheduleParallel(job, entityQuery, dependency);
	}
}
